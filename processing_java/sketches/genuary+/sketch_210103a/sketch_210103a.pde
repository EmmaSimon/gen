import nice.palettes.*;

String arecibo
boolean[][] areciboGrid = new boolean[73][23];
int gridSize = 10;

ColorPalette palette;
long seed = (long) random(99999);

void setup() {
  size(230,730);
  palette = new ColorPalette(this);
  palette.getPalette();
  smooth(8);
  noFill();
  noStroke();
  noiseSeed(seed);
  noLoop();
  for (int i = 0; i < arecibo.length(); i++) {
    int row = floor(i/23);
    int col = i%23;
    areciboGrid[row][col] = arecibo.charAt(i) == '1';
  }
}

void draw() {
  background(palette.colors[0]);
  pushMatrix();
  
  int rowCount = 0;
  int bitCount = 0;
  for (boolean[] row : areciboGrid) {
    for (boolean bit : row) {
      int colorIndex = floor(rowCount/25) + 1;
      float blend = ((float) rowCount/25.0) - (colorIndex - 1);
      stroke(
        lerpColor(
          palette.colors[colorIndex],
          palette.colors[colorIndex+1],
          blend
        )
      );
      float skew = lerp(0, 3, noise(bitCount, rowCount));
      if (bit) {
        //line((gridSize/2) + skew , 0, gridSize/2 - skew, gridSize);
        //circle(gridSize/2, gridSize/2, gridSize);
        for (int p = 0; p < 250; p++) {
          point((gridSize/2) + skew * randomGaussian(), (gridSize/2) + skew * randomGaussian());
        }
      } else {
        //line(0, (gridSize/2) - skew, gridSize, (gridSize/2) + skew);
        //line((gridSize/2) + skew , 0, gridSize/2 - skew, gridSize);
      }
      translate(gridSize, 0);
      bitCount++;
    }
    rowCount++;
    translate(-gridSize * 23, gridSize);
  }
  popMatrix();
}

void keyPressed() {
  if (key == 's') {
    background(palette.colors[4]);
    seed = (int) random(99999);
    noiseSeed(seed);
    redraw();
  } else if (key == 'p') {
    palette.getPalette();
    background(palette.colors[4]);
    redraw();
  } else if (key == 'i') {
    save(String.format("arecibo-%s.png", millis()));
  }
}
