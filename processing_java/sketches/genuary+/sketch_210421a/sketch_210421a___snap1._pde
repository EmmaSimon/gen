/**
 * Hexagonal grid utility class
 * Dependencies: toxiclibs-0018 or newer
 * LGPL2 licensed
 */
import toxi.geom.*;
import toxi.processing.*;

HexGrid grid;
ToxiclibsSupport gfx;


int padding = 10;
int gridWidth = 11;
int gridHeight = 11;

void setup() {
  size(600, 600);


  float hexRadius = width / (gridWidth - .5) / 2;
  grid = new HexGrid(hexRadius, gridWidth, gridHeight);
  gfx = new ToxiclibsSupport(this);
}

void draw() {
  background(255);
  noFill();
  translate(50, 50);
  grid.draw(gfx);
}

public class Hex {
    int in, out;
    Polygon2D shape;

    private Polygon2D getShape() {
        if (shape != null) {
            return shape;
        }
        else return null;
    }

    public Hex() {}
    public Hex(Polygon2D shape) {
        this.shape = shape;
    }
    public Hex(int in) {
        this.in = in;
    }
    public Hex(int in, int out) {
        this.in = in;
        this.out = out;

    }

}

public class HexGrid {
  float cellWidth, cellHeight;
  int cols, rows;
  Polygon2D hexProto;
  Hex[][] grid;

  public HexGrid(float radius, int cols, int rows) {
    hexProto = new Circle(radius).toPolygon2D(6);
    int vc = 0;
    for(Vec2D v : hexProto.vertices) {
        /**
            Turn each face PI/6, go from having the flat on the top and bottom, to pointy up and down with flat sides
        */
        if (vc % 2 == 1) {
            // v.clear();
        } else {
            v.rotate(PI/6);
        }
        vc++;
    }

    this.cols = cols;
    this.rows = rows;
    grid = new Hex[this.cols][this.rows];
    cellWidth = hexProto.getBounds().width;
    cellHeight = cellWidth * sin(PI/3);
    this.populate();
  }

  private Hex placeHex(int x, int y) {
    Hex hex = new Hex(hexProto.copy());
    Hex[] surroundings = new Hex[6];
    for (int face = 0; face < 6; face++) {
        // int faceX = face % 3;
        // int faceY
        // surroundings[face] =
    }
    return hex;
  }

  void populate() {
    for (int x = 0; x < cols; x++) {
        for (int y = 0; y < rows; y++) {
            if (y % 2 == 0 && x == cols - 1) {
                continue;
            }
            grid[x][y] = placeHex(x, y);
        }
    }
  }

  void draw(ToxiclibsSupport gfx) {
    for (int x = 0; x < cols; x++) {
      for (int y = 0; y < rows; y++) {
        if (grid[x][y] == null || grid[x][y].getShape() == null) {
            continue;
        }
        gfx.polygon2D(
            grid[x][y].getShape().copy().translate(getPosForCell(x,y))
        );
      }
    }
  }

  Vec2D getPosForCell(int x, int y) {
    return new Vec2D((x + (0 == y % 2 ? 0.5 : 0)) * cellWidth, y * cellHeight);
  }
}
